package vista.report;import java.awt.BorderLayout;import java.awt.FileDialog;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.KeyEvent;import java.io.FileWriter;import java.io.PrintWriter;import javax.swing.JMenu;import javax.swing.JMenuBar;import javax.swing.JMenuItem;import javax.swing.JOptionPane;import javax.swing.JScrollPane;import javax.swing.JTextPane;import javax.swing.KeyStroke;import javax.swing.text.BadLocationException;import javax.swing.text.DefaultStyledDocument;import javax.swing.text.Style;import javax.swing.text.StyleConstants;import javax.swing.text.StyleContext;import javax.swing.text.StyledDocument;import javax.swing.text.html.MinimalHTMLWriter;import vista.gui.VistaUtils;/** *  *  *  * @author Nicky Sandhu "$Id: TextDisplay.java,v 1.1 2003/10/02 20:49:19 redwood *         Exp $ *  *         Last change: AM 14 Jun 2000 3:32 pm */public class TextDisplay extends MPanel {	public static boolean DEBUG = false;	public static String[] itemText = {	"Save",	"Save As Html",	"Print",	"Quit",	};	public static String[] toolTipText = {	"Saves to a text file",	"Saves to a html file",	"Prints as displayed",	"Closes this display frame",	};	public static int[] itemKeys = {	KeyEvent.VK_S,	KeyEvent.VK_H,	KeyEvent.VK_P,	KeyEvent.VK_Q,	};	/**
   *
   */	protected TextDisplay() {	}	/**
   *
   */	public TextDisplay(StyledDocument doc) {		addDocument(doc);	}	/**
   *
   */	public TextDisplay(String[] lines) {		String lineSeparator = System.getProperty("line.separator");		StyledDocument doc = new DefaultStyledDocument();		StyleContext sc = new StyleContext();		Style def = sc.getStyle(StyleContext.DEFAULT_STYLE);		Style normal = sc.addStyle("Normal", def);		// StyleConstants.setFontFamily(normal,"TimesRoman");		StyleConstants.setFontSize(normal, 8);		for (int i = 0; i < lines.length; i++) {			try {				doc.insertString(doc.getEndPosition().getOffset() - 1, lines[i]						+ lineSeparator, normal);			} catch (BadLocationException ble) {				System.err.println("Could not insert string for line: "						+ lines[i]);			}		}		addDocument(doc);	}	/**	 * 	 * adds the given document to this frame	 */	void addDocument(StyledDocument doc) {		_doc = doc;		JTextPane jtp = new ReportPane();		jtp.setEditable(false);		jtp.setDocument(doc);		setLayout(new BorderLayout());		add(new JScrollPane(jtp), BorderLayout.CENTER);	}	/**
    *
    */	public void setFrameTitle(String str) {		_frameTitle = str;	}	/**
   *
   */	public String getFrameTitle() {		return _frameTitle;	}	/**
    *
    */	public JMenuBar getJMenuBar() {		if (_mbar == null)			_mbar = createJMenuBar();		return _mbar;	}	/**
   *
   */	public JMenuBar createJMenuBar() {		int mindex = 0;		JMenuItem saveItem = new JMenuItem(itemText[mindex]);		saveItem.setToolTipText(toolTipText[mindex]);		saveItem.setAccelerator(KeyStroke.getKeyStroke(itemKeys[mindex],				KeyEvent.CTRL_MASK));		saveItem.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent evt) {				save();			}		});		//		mindex++;		JMenuItem saveAsHtmlItem = new JMenuItem(itemText[mindex]);		// saveAsHtmlItem.setEnabled(false); // ?? temporary		saveAsHtmlItem.setToolTipText(toolTipText[mindex]);		saveAsHtmlItem.setAccelerator(KeyStroke.getKeyStroke(itemKeys[mindex],				KeyEvent.CTRL_MASK));		saveAsHtmlItem.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent evt) {				saveAsHtml();			}		});		mindex++;		//		JMenuItem printItem = new JMenuItem(itemText[mindex]);		printItem.setToolTipText(toolTipText[mindex]);		printItem.setAccelerator(KeyStroke.getKeyStroke(itemKeys[mindex],				KeyEvent.CTRL_MASK));		printItem.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent evt) {				print();			}		});		//		mindex++;		JMenuItem quitItem = new JMenuItem(itemText[mindex]);		quitItem.setToolTipText(toolTipText[mindex]);		quitItem.setAccelerator(KeyStroke.getKeyStroke(itemKeys[mindex],				KeyEvent.CTRL_MASK));		quitItem.addActionListener(new ActionListener() {			public void actionPerformed(ActionEvent evt) {				quit();			}		});		//		//		JMenu fileMenu = new JMenu("File");		fileMenu.add(saveItem);		fileMenu.add(saveAsHtmlItem);		fileMenu.add(printItem);		fileMenu.addSeparator();		fileMenu.addSeparator();		fileMenu.add(quitItem);		//		_mbar = new JMenuBar();		_mbar.add(fileMenu);		return _mbar;	}	/**
   *
   */	void print() {		if (DEBUG)			System.out.println("Print");		Style s = null;		try {			s = _doc.getStyle("main");			StyleConstants.setFontSize(s, 7);			Style dateStyle = _doc.getStyle("date style");			if (dateStyle != null)				StyleConstants.setFontSize(dateStyle, 5);			GuiUtils.print(GuiUtils.getComponent(JTextPane.class, this));		} catch (Exception e) {			VistaUtils.displayException(this, e);		} finally {			if (s != null) {				s = _doc.getStyle("main");				StyleConstants.setFontSize(s, 12);				Style dateStyle = _doc.getStyle("date style");				if (dateStyle != null)					StyleConstants.setFontSize(dateStyle, 5);			}		}	}	/**
   *
   */	void save() {		if (_doc != null) {			try {				String saveFile = VistaUtils.getFilenameFromDialog(this,						FileDialog.SAVE,						"txt", "Text File");				if (saveFile == null)					return;				PrintWriter writer = new PrintWriter(new FileWriter(saveFile));				String txt = _doc.getText(0, _doc.getLength());				java.util.StringTokenizer st =				new java.util.StringTokenizer(txt, System						.getProperty("line.separator"));				while (st.hasMoreTokens()) {					String line = (String) st.nextToken().trim();					writer.println(line);				}				writer.close();			} catch (Exception e) {				VistaUtils.displayException(this, e);			}		}		if (DEBUG)			System.out.println("Save");	}	/**
   *
   */	void saveAsHtml() {		if (_doc != null) {			try {				String saveFile = VistaUtils.getFilenameFromDialog(this,						FileDialog.SAVE,						"html", "HTML files");				if (saveFile == null)					return;				FileWriter writer = new FileWriter(saveFile);				new MinimalHTMLWriter(writer, (StyledDocument) _doc).write();				writer.close();			} catch (Exception e) {				VistaUtils.displayException(this, e);			}		}		if (DEBUG)			System.out.println("Save As Html");	}	/**
   *
   */	void quit() {		if (DEBUG)			System.out.println("Quit");		JOptionPane.getFrameForComponent(this).dispose();	}	private StyledDocument _doc;	private String _frameTitle = "REPORT";	private JMenuBar _mbar;}