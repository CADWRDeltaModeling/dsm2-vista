package vista.report;import java.awt.BorderLayout;import java.awt.Component;import java.awt.Container;import java.awt.FlowLayout;import java.awt.Frame;import java.awt.Graphics;import java.awt.PrintJob;import java.awt.Toolkit;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.File;import java.io.FileWriter;import java.io.IOException;import java.io.InputStreamReader;import java.io.PrintWriter;import java.util.Properties;import javax.swing.BorderFactory;import javax.swing.Box;import javax.swing.BoxLayout;import javax.swing.JButton;import javax.swing.JCheckBoxMenuItem;import javax.swing.JComponent;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JMenuBar;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JProgressBar;import vista.app.DataGraph;import vista.app.DataTable;import vista.app.MultiDataTable;import vista.gui.VistaUtils;import vista.set.DataReference;import vista.set.Pathname;/** *  *  *  *  *  * @author Nicky Sandhu, Yan-Ping Zuo, Armin munevar *  * @version $Id: GuiUtils.java,v 1.1 2003/10/02 20:49:17 redwood Exp $ *  *          Last change: AM 14 Jun 2000 5:43 pm */public class GuiUtils {	static {		VistaUtils.AWT_FILE_DIALOG = true;	}	/**
   *
   */	public static String getVersionName() {		Properties props = new Properties();		String version = "1.0";		try {			props.load(VistaUtils.getResourceAsStream("/calsim/version"));			version = props.getProperty("version");		} catch (Exception e) {		}		return version;	}	/**	 * 	 * prints component to printer	 */	public static void print(Component comp) {		Frame fr = JOptionPane.getFrameForComponent(comp);		Toolkit dtk = Toolkit.getDefaultToolkit();		PrintJob pjob = dtk.getPrintJob(fr, "Print Dialog", null);		if (pjob != null) {			Graphics pg = pjob.getGraphics();			if (pg != null) {				comp.paint(pg);				pg.dispose(); // flush page			}			pjob.end();		} else {			try {				throw new RuntimeException("No print job available!!");			} catch (Exception e) {				VistaUtils.displayException(null, e);			}		}	}	/**	 * 	 * get a string from a dialog box	 */	public static String getStringFromDialog(String message) {		String _message = message;		String dstring = null;		dstring = JOptionPane.showInputDialog(_message);		if (dstring == null)			return null;		return dstring;	}	/**	 * 	 * displays data for the given bpart and cpart	 */	public static void displayData(Component comp, String bpart, String cpart) {		// send bpart and cpart to app		try {			JFrame[] frs = AppUtils.displayData(bpart, cpart);			String tabName = cpart + " @ " + bpart;			convertFramesToPanels(frs, tabName);		} catch (Exception e) {			VistaUtils.displayException(comp, e);		}	}	/**
   *
   */	public static void displayData(DataReference ref) {		JFrame[] frs = AppUtils.displayData(ref);		String tabName = ref.getPathname().getPart(Pathname.B_PART);		convertFramesToPanels(frs, tabName);	}	/**
   *
   */	public static void displayData(DataReference[] refs) {		JFrame[] frs = AppUtils.displayData(refs);		String tabName = "";		for (int i = 0; i < refs.length; i++) {			DataReference ref = refs[i];			if (ref != null)				tabName += ref.getPathname().getPart(Pathname.B_PART);		}		convertFramesToPanels(frs, tabName);	}	/**
   *
   */	static void convertFramesToPanels(JFrame[] frs, String tabName) {		if (frs == null)			return;		JPanel mp = new JPanel();		for (int i = 0; i < frs.length; i++) {			if (frs[i] == null)				continue;			if (frs[i] instanceof DataGraph) {				// mp.getGraphOutputPanel().addToTabbedPane(createPanelFromFrame(frs[i]),tabName);				// frs[i].dispose();				frs[i].setVisible(true);			} else if (frs[i] instanceof DataTable					|| frs[i] instanceof MultiDataTable) {				// mp.getTableOutputPanel().addToTabbedPane(createPanelFromFrame(frs[i]),tabName);				// frs[i].dispose();				frs[i].setVisible(true);			} else {				// mp.getMonthlyReportPanel().addToTabbedPane(createPanelFromFrame(frs[i]),tabName);				// frs[i].dispose();				frs[i].setVisible(true);			}		}	}	/**
   *
   */	public static String getLocaleDescription() {		String osname = System.getProperty("os.name");		String osversion = System.getProperty("os.version");		String archName = System.getProperty("os.arch");		String javaVendor = System.getProperty("java.vendor");		String javaVersion = System.getProperty("java.version");		return "Running java " + javaVersion + " from " + javaVendor + " on " +		osname + " " + osversion + " " + archName + " machine";	}	/**	 * 	 * traverses the component to find the first component of the	 * 	 * given class.	 */	public static Component getComponent(Class cl, Container cont) {		Component[] comps = cont.getComponents();		for (int i = 0; i < comps.length; i++) {			if (cl.isInstance(comps[i]))				return comps[i];			if (comps[i] instanceof Container) {				Component compx = getComponent(cl, (Container) comps[i]);				if (compx != null)					return compx;			}		}		return null;	}	/**
   *
   */	static void displayComponents(Container cont, int depth) {		Component[] comps = cont.getComponents();		//		if (comps == null)			return;		//		String prestr = "";		for (int i = 0; i < depth; i++)			prestr += "-";		prestr += " ";		//		for (int i = 0; i < comps.length; i++) {			Component comp = comps[i];			if (comp instanceof Container) {				System.out.println(prestr + comp);				displayComponents((Container) comp, depth + 1);			} else {				System.out.println(prestr + comp);			}		}	}	/**
   *
   */	public static boolean noCheckBoxMenuItemIsChecked(JCheckBoxMenuItem item1,	JCheckBoxMenuItem item2,	JCheckBoxMenuItem item3) {		System.out.println("noCheckbox");		if ((item1.isSelected() == false) && (item2.isSelected() == false)		&& (item3.isSelected() == false))			return true;		else			return false;	}	/**
   *
   */	public static void setStatus(String msg) {		if (msg != null)			_status.setText(msg);	}	/**	 * 	 * copies a frames menubar and content pane to create a panel with	 * 	 * that menubar and content pane.	 */	public static JPanel createPanelFromFrame(JFrame fr) {		JMenuBar mbar = fr.getJMenuBar();		JComponent contentPane = (JComponent) fr.getContentPane();		contentPane.setAutoscrolls(true);		JPanel cPanel = new JPanel();		cPanel.setLayout(new BorderLayout());		cPanel.add(contentPane);		JPanel mbox = new JPanel();		mbox.setBorder(BorderFactory.createRaisedBevelBorder());		mbox.setLayout(new BoxLayout(mbox, BoxLayout.X_AXIS));		mbox.add(mbar);		mbox.add(Box.createHorizontalGlue());		mbox.add(Box.createVerticalStrut(20));		JButton closeButton = new JButton("X");		mbox.add(closeButton);		JPanel p = new JPanel();		p.setLayout(new BoxLayout(p, BoxLayout.Y_AXIS));		p.add(mbox);		p.add(cPanel);		return p;	}	/**	 * 	 * Get status panel	 */	public static JPanel getStatusPanel() {		if (_statusPanel == null)			_statusPanel = createStatusPanel();		return _statusPanel;	}	/**	 * 	 * create stutas panel which contains a progress bar, a label "Status", and	 * a text field.	 */	public static JPanel createStatusPanel() {		JProgressBar progressBar = new JProgressBar();		progressBar.setStringPainted(true);		progressBar.setVisible(false); // // ?? temporary		JLabel name = new JLabel("Status:");		_status = new JLabel();		JPanel panel = new JPanel();		panel.setLayout(new FlowLayout(FlowLayout.LEFT));		panel.add(progressBar);		panel.add(name);		panel.add(_status);		panel.setBorder(BorderFactory.createEtchedBorder());		return panel;	}	/**
   *
   */	public static int doCommand(String dir, String cmd) {		File tmpfile = new File("temp.bat");		try {			PrintWriter tempWriter = new PrintWriter(			new BufferedWriter(new FileWriter(tmpfile)));			if (dir != null) {				File fl = new File(dir);				String root = fl.getParent();				while (true) {					String parent = new File(root).getParent();					if (parent != null)						root = parent;					else						break;				}				if (root.indexOf(":") >= 0) {					tempWriter							.println(root.substring(0, root.indexOf(":") + 1));				}				tempWriter.println("cd " + dir);			}			tempWriter.println("start /min " + cmd);			tempWriter.close();			Process p = Runtime.getRuntime().exec("temp.bat");			BufferedReader stdout = new BufferedReader(new InputStreamReader(p					.getInputStream()));			BufferedReader stderr = new BufferedReader(new InputStreamReader(p					.getErrorStream()));			String line;			while (null != (line = stdout.readLine())) {				System.out.println(line);			}			stdout.close();			while (null != (line = stderr.readLine())) {				System.out.println(line);			}			stderr.close();			return p.waitFor();		} catch (IOException ee) {			System.out.println(ee.getMessage());			return 1;		} catch (InterruptedException ee) {			System.out.println("Ahem!  You interrupted.");			return 1;		} finally {			// clean up			tmpfile.delete();		}	}	/**	 * 	 * Remove end of line chars from String for Fortran	 */	public static String removeEOLChars(String s) {		String ns = s;		int i = 1;		while (i != -1) {			i = ns.indexOf("\n");			if (i > 0)				ns = ns.substring(0, i) + " " + ns.substring(i + 1);		}		return ns;	}	/**
   *
   */	static JPanel _statusPanel;	static JLabel _status;}