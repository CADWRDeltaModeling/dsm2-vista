/*
    Copyright (C) 1996, 1997, 1998 State of California, Department of 
    Water Resources.

    VISTA : A VISualization Tool and Analyzer. 
	Version 1.0beta
	by Nicky Sandhu
    California Dept. of Water Resources
    Division of Planning, Delta Modeling Section
    1416 Ninth Street
    Sacramento, CA 95814
    (916)-653-7552
    nsandhu@water.ca.gov

    Send bug reports to nsandhu@water.ca.gov

    This program is licensed to you under the terms of the GNU General
    Public License, version 2, as published by the Free Software
    Foundation.

    You should have received a copy of the GNU General Public License
    along with this program; if not, contact Dr. Francis Chung, below,
    or the Free Software Foundation, 675 Mass Ave, Cambridge, MA
    02139, USA.

    THIS SOFTWARE AND DOCUMENTATION ARE PROVIDED BY THE CALIFORNIA
    DEPARTMENT OF WATER RESOURCES AND CONTRIBUTORS "AS IS" AND ANY
    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE CALIFORNIA
    DEPARTMENT OF WATER RESOURCES OR ITS CONTRIBUTORS BE LIABLE FOR
    ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
    OR SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR
    BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
    LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
    USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
    DAMAGE.

    For more information about VISTA, contact:

    Dr. Francis Chung
    California Dept. of Water Resources
    Division of Planning, Delta Modeling Section
    1416 Ninth Street
    Sacramento, CA  95814
    916-653-5601
    chung@water.ca.gov

    or see our home page: http://wwwdelmod.water.ca.gov/

    Send bug reports to nsandhu@water.ca.gov or call (916)-653-7552

 */
package vista.app;

import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

import vista.gui.VistaUtils;

/**
 * The main properties for the main application
 * 
 * @author Nicky Sandhu
 * @version $Id: MainProperties.java,v 1.1 2003/10/02 20:48:33 redwood Exp $
 */
public class MainProperties {
	/**
	 * the properties
	 */
	private static Properties _props;

	/**
	 * cannot be initialized other than by a static method
	 */
	private MainProperties() {
	}

	/**
	 * initialze to inbuilt defaults
	 */
	private static void initialize() {
		_props = new Properties();
		// default properites...
		_props.put("gui.width", "700");
		_props.put("gui.height", "300");
		_props.put("gui.lookAndFeel", "system");
		_props.put("gui.initialPosition", "top&left");
		_props.put("gui.connect", "false");
		// _props.put("","");
		_props.put("debug", "false");
		_props.put("email.maintainers", "kjacobs@water.ca.gov");
		_props.put("default.server", "oakley");
		_props.put("default.dir", "/delta4/data/dss");
		_props.put("default.port", "1099");
		_props.put("dss.flags", "true");
		_props.put("dss.localAccess", "true");
		_props.put("graph.legendTemplate", "[C] at [B] ([F])");
		_props.put("graph.titleTemplate", "Graph ([A$1])");
		// determines if units are to be used to decide on order of plotting
		// the other option is to plot in the order in which they appear
		// in the group view
		_props.put("graph.useUnits", "true");
		_props.put("graph.curvesPerPlot", "5");
		_props.put("graph.plotsPerGraph", "2");
		_props.put("pp.rect", "50,70,450,600");
		_props.put("printer.names", "dms215rm12,dms215rm4,dms215rm8");
	}

	/**
	 * initialize from stream
	 */
	private static void initialize(InputStream is) {
		initialize();
		// end default properties
		try {
			_props.load(new BufferedInputStream(is));
		} catch (IOException ioe) {
			System.out.println(ioe.getMessage());
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
	}

	/**
	 * get property with given name
	 */
	public static String getProperty(String propertyName) {
		return _props.getProperty(propertyName);
	}

	/**
	 * gets all the properties
	 */
	public static Properties getProperties() {
		return _props;
	}

	/**
	 * sets all the properties
	 */
	public static void setProperties(Properties p) {
		_props = p;
	}

	/**
	 * saves to given filename all the properties in the properties file format.
	 */
	public static void saveTo(String file) {
		try {
			FileOutputStream fos = new FileOutputStream(file);
			_props.save(fos, "Generated by vista on " + new java.util.Date());
			fos.close();
		} catch (IOException ioe) {
		}
	}

	/**
	 * initializes the properties
	 */
	static {
		InputStream is = null;
		try {
			is = VistaUtils.getPropertyFileAsStream(".vista");
		} catch (Exception e) {
			System.err.println("Error reading local properties files");
		}
		// resource last
		try {
			if (is == null)
				is = MainProperties.class.getResourceAsStream("/vista/.vista");
		} catch (Exception e) {
			System.out.println("Error reading jared properties files");
		}
		// if nothing found
		// System.out.println("Main Properties initialization!");
		if (is != null)
			initialize(is);
		else
			initialize();
	}
}
